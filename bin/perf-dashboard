#!/usr/bin/env bash

# Performance Dashboard
# Interactive dashboard for monitoring dotfiles performance

set -e

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
ANALYTICS_DIR="$HOME/.config/dotfiles"
PERF_DATA="$ANALYTICS_DIR/perf-data.csv"

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get average shell startup time (last 10 startups)
get_avg_startup_time() {
    if [[ ! -f "$PERF_DATA" ]]; then
        echo "N/A"
        return
    fi

    local avg
    avg=$(grep "shell_startup" "$PERF_DATA" | tail -10 | awk -F',' '{sum+=$3; count++} END {if(count>0) print sum/count/1000000; else print "N/A"}')
    printf "%.0f" "$avg" 2>/dev/null || echo "N/A"
}

# Get plugin load time
get_plugin_load_time() {
    if [[ ! -f "$PERF_DATA" ]]; then
        echo "N/A"
        return
    fi

    local total
    total=$(grep "plugin_load" "$PERF_DATA" | tail -20 | awk -F',' '{sum+=$3} END {if(NR>0) print sum/1000000; else print "N/A"}')
    printf "%.0f" "$total" 2>/dev/null || echo "N/A"
}

# Get memory usage
get_memory_usage() {
    if [[ ! -f "$PERF_DATA" ]]; then
        echo "N/A"
        return
    fi

    local avg
    avg=$(tail -20 "$PERF_DATA" | awk -F',' 'NF>=4 && $4>0 {sum+=$4; count++} END {if(count>0) print sum/count; else print "N/A"}')
    printf "%.1f" "$avg" 2>/dev/null || echo "N/A"
}

# Show startup trend chart (ASCII art)
show_startup_trend_chart() {
    if [[ ! -f "$PERF_DATA" ]]; then
        echo "  No data available"
        return
    fi

    # Get last 7 days of startup data
    local data
    data=$(grep "shell_startup" "$PERF_DATA" | tail -21 | awk -F',' '{print $3/1000000}')

    if [[ -z "$data" ]]; then
        echo "  No startup data available"
        return
    fi

    # Simple ASCII chart
    echo "  Last 7 startups (ms):"
    echo "$data" | tail -7 | awk '{
        if ($1 < 300) symbol="‚ñÅ"
        else if ($1 < 500) symbol="‚ñÇ"
        else if ($1 < 700) symbol="‚ñÉ"
        else if ($1 < 1000) symbol="‚ñÖ"
        else if ($1 < 1500) symbol="‚ñÜ"
        else symbol="‚ñá"
        printf "    %.0fms %s\n", $1, symbol
    }'
}

# Detect performance issues
detect_performance_issues() {
    if [[ ! -f "$PERF_DATA" ]]; then
        echo "  No performance data available"
        return
    fi

    local issues_found=0

    # Check startup time
    local avg_startup
    avg_startup=$(get_avg_startup_time)
    if [[ "$avg_startup" != "N/A" ]] && (( $(echo "$avg_startup > 1000" | bc -l 2>/dev/null || echo "0") )); then
        echo "  üî¥ Slow startup detected (${avg_startup}ms)"
        echo "     Consider running 'make profile' for details"
        issues_found=1
    fi

    # Check for slow plugins
    local slow_plugins
    slow_plugins=$(grep "plugin_load" "$PERF_DATA" | tail -20 | awk -F',' '$3/1000000 > 100 {print $5, $3/1000000}' | sort -nr -k2 | head -3)

    if [[ -n "$slow_plugins" ]]; then
        echo "  üü° Slow plugins detected:"
        echo "$slow_plugins" | while read -r plugin time; do
            printf "     %s: %.0fms\n" "$plugin" "$time"
        done
        issues_found=1
    fi

    # Check for slow commands
    local slow_commands
    slow_commands=$(grep "command_exec" "$PERF_DATA" | tail -50 | awk -F',' '$3/1000000 > 2000 {print $5, $3/1000000}' | sort -nr -k2 | head -3)

    if [[ -n "$slow_commands" ]]; then
        echo "  üü† Slow commands detected:"
        echo "$slow_commands" | while read -r cmd time; do
            printf "     %s: %.0fms\n" "$cmd" "$time"
        done
        issues_found=1
    fi

    if [[ $issues_found -eq 0 ]]; then
        echo "  ‚úÖ No performance issues detected"
    fi
}

# Generate optimization suggestions
suggest_optimizations() {
    if [[ ! -f "$PERF_DATA" ]]; then
        echo "  No performance data available for suggestions"
        return
    fi

    local suggestions_made=0

    # Analyze slow plugins
    local slow_plugins
    slow_plugins=$(grep "plugin_load" "$PERF_DATA" | tail -20 | awk -F',' '$3/1000000 > 50 {print $5}' | sort | uniq -c | sort -nr)

    if [[ -n "$slow_plugins" ]]; then
        echo "$slow_plugins" | head -3 | while read -r _ plugin; do
            case "$plugin" in
                *git*)
                    echo "  üí° Consider lazy-loading git plugin"
                    echo "     Add: znap eval git 'git completion'"
                    suggestions_made=1
                    ;;
                *kubectl*)
                    echo "  üí° Lazy-load kubectl completion"
                    echo "     Move kubectl setup to function"
                    suggestions_made=1
                    ;;
                *docker*)
                    echo "  üí° Docker plugin is slow - consider lazy loading"
                    suggestions_made=1
                    ;;
            esac
        done
    fi

    # Check startup time trend
    local recent_avg old_avg
    recent_avg=$(grep "shell_startup" "$PERF_DATA" | tail -5 | awk -F',' '{sum+=$3} END {print sum/NR/1000000}')
    old_avg=$(grep "shell_startup" "$PERF_DATA" | tail -15 | head -5 | awk -F',' '{sum+=$3} END {print sum/NR/1000000}')

    if [[ -n "$recent_avg" && -n "$old_avg" ]] && (( $(echo "$recent_avg > $old_avg * 1.2" | bc -l 2>/dev/null || echo "0") )); then
        echo "  üí° Startup time has increased recently"
        echo "     Run 'make profile' to identify the cause"
        suggestions_made=1
    fi

    # Suggest modern alternatives
    local slow_commands
    slow_commands=$(grep "command_exec" "$PERF_DATA" | tail -100 | awk -F',' '{print $5}' | sort | uniq -c | sort -nr | head -5)

    if [[ -n "$slow_commands" ]]; then
        echo "$slow_commands" | while read -r _ cmd; do
            case "$cmd" in
                ls)
                    echo "  üí° Consider using 'eza' instead of 'ls' (already aliased)"
                    ;;
                grep)
                    echo "  üí° Consider using 'ripgrep' (rg) for better performance"
                    ;;
                find)
                    echo "  üí° Consider using 'fd' instead of 'find'"
                    ;;
            esac
        done
    fi

    # Show final message
    if [[ $suggestions_made -eq 0 ]] && [[ -z "$slow_plugins" ]] && [[ -z "$slow_commands" ]]; then
        echo "  ‚úÖ Your configuration is well optimized!"
    fi
}

# Export performance report
export_performance_report() {
    local output_file="${1:-$HOME/dotfiles-performance-report.txt}"
    log_info "Generating performance report..."

    {
        echo "Dotfiles Performance Report"
        echo "Generated: $(date)"
        echo "=============================="
        echo

        echo "CURRENT METRICS:"
        echo "- Average startup time: $(get_avg_startup_time)ms"
        echo "- Plugin load time: $(get_plugin_load_time)ms"
        echo "- Memory usage: $(get_memory_usage)MB"
        echo "- Data points: $(wc -l < "$PERF_DATA" 2>/dev/null || echo "0")"
        echo

        echo "PERFORMANCE ISSUES:"
        detect_performance_issues
        echo

        echo "OPTIMIZATION SUGGESTIONS:"
        suggest_optimizations
        echo

        echo "RECENT STARTUP TREND:"
        show_startup_trend_chart
        echo

        echo "TOP SLOW COMMANDS (last 100 executions):"
        if [[ -f "$PERF_DATA" ]]; then
            grep "command_exec" "$PERF_DATA" | tail -100 | awk -F',' '{print $5, $3/1000000}' | sort -nr -k2 | head -10 | while read -r cmd time; do
                printf "  %s: %.0fms\n" "$cmd" "$time"
            done
        fi
        echo

        echo "PLUGIN LOAD TIMES:"
        if [[ -f "$PERF_DATA" ]]; then
            grep "plugin_load" "$PERF_DATA" | tail -50 | awk -F',' '{sum[$5]+=$3; count[$5]++} END {for(plugin in sum) printf "  %s: %.0fms (avg over %d loads)\n", plugin, sum[plugin]/count[plugin]/1000000, count[plugin]}' | sort -nr -k2
        fi

    } > "$output_file"

    log_success "Performance report saved to: $output_file"
}

# Auto-optimize detected issues
auto_optimize() {
    log_info "Analyzing performance for auto-optimization..."

    if [[ ! -f "$PERF_DATA" ]]; then
        log_warning "No performance data available"
        return 1
    fi

    local optimizations_applied=0

    # Check for slow kubectl completion
    local kubectl_slow
    kubectl_slow=$(grep "plugin_load.*kubectl" "$PERF_DATA" | tail -10 | awk -F',' '$3/1000000 > 100' | wc -l)

    if [[ $kubectl_slow -gt 0 ]]; then
        log_info "Detected slow kubectl completion, suggesting lazy loading..."
        echo "Add this to your .zshrc for lazy kubectl completion:"
        echo "kubectl() { unfunction kubectl; source <(kubectl completion zsh); kubectl \$@; }"
        optimizations_applied=1
    fi

    if [[ $optimizations_applied -eq 0 ]]; then
        log_success "No automatic optimizations needed - performance looks good!"
    fi
}

# Show interactive dashboard
show_performance_dashboard() {
    clear
    echo -e "${PURPLE}üöÄ Dotfiles Performance Dashboard${NC}"
    echo "================================="
    echo

    # Current metrics
    local startup_time plugin_time memory_usage
    startup_time=$(get_avg_startup_time)
    plugin_time=$(get_plugin_load_time)
    memory_usage=$(get_memory_usage)

    echo -e "${BLUE}üìä Current Metrics:${NC}"
    printf "  Shell Startup: %s" "$startup_time"
    if [[ "$startup_time" != "N/A" ]]; then
        if (( $(echo "$startup_time < 500" | bc -l 2>/dev/null || echo "1") )); then
            echo -e " ${GREEN}‚úÖ${NC}"
        elif (( $(echo "$startup_time < 1000" | bc -l 2>/dev/null || echo "0") )); then
            echo -e " ${YELLOW}‚ö†Ô∏è${NC}"
        else
            echo -e " ${RED}üî¥${NC}"
        fi
    else
        echo
    fi

    echo "  Plugin Load: ${plugin_time}ms"
    echo "  Memory Usage: ${memory_usage}MB"
    echo

    # Trends
    echo -e "${CYAN}üìà Performance Trend:${NC}"
    show_startup_trend_chart
    echo

    # Issues
    echo -e "${YELLOW}‚ö†Ô∏è  Performance Analysis:${NC}"
    detect_performance_issues
    echo

    # Suggestions
    echo -e "${GREEN}üí° Optimization Suggestions:${NC}"
    suggest_optimizations
    echo

    # Quick actions
    echo -e "${PURPLE}üîß Quick Actions:${NC}"
    echo "  [1] Profile startup details    (make profile)"
    echo "  [2] Export performance report  (perf-dashboard --export)"
    echo "  [3] Auto-optimize issues       (perf-dashboard --auto-optimize)"
    echo "  [4] View raw data              (head $PERF_DATA)"
    echo
}

# Show help
show_help() {
    echo "Performance Dashboard"
    echo ""
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  dashboard             Show interactive performance dashboard (default)"
    echo "  export [file]         Export performance report to file"
    echo "  auto-optimize         Apply automatic optimizations"
    echo "  metrics               Show current metrics only"
    echo "  issues                Show performance issues only"
    echo "  suggestions           Show optimization suggestions only"
    echo ""
    echo "Options:"
    echo "  --help               Show this help message"
    echo ""
}

# Main function
main() {
    case "${1:-dashboard}" in
        dashboard)
            show_performance_dashboard
            ;;
        export|--export)
            export_performance_report "$2"
            ;;
        auto-optimize|--auto-optimize)
            auto_optimize
            ;;
        metrics)
            echo "Startup: $(get_avg_startup_time)ms"
            echo "Plugins: $(get_plugin_load_time)ms"
            echo "Memory: $(get_memory_usage)MB"
            ;;
        issues)
            detect_performance_issues
            ;;
        suggestions)
            suggest_optimizations
            ;;
        --help|help)
            show_help
            ;;
        *)
            log_error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

# Run if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
