#!/usr/bin/env bash

# Starship theme switcher
# Easily switch between different starship configurations

# Note: Not using 'set -e' to allow graceful handling of missing files

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Paths - handle both direct execution and symlinked execution
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# If this is a symlink, resolve to the actual dotfiles directory
if [[ -L "${BASH_SOURCE[0]}" ]]; then
    REAL_SCRIPT="$(readlink "${BASH_SOURCE[0]}")"
    DOTFILES_DIR="$(cd "$(dirname "$REAL_SCRIPT")/.." && pwd)"
else
    # Check if we're in the bin directory of dotfiles
    if [[ "$SCRIPT_DIR" == */dotfiles/bin ]]; then
        DOTFILES_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
    else
        # We're probably in ~/.bin, find the dotfiles directory
        DOTFILES_DIR="/Users/segersand/repos/dotfiles"
        # Try to find it more dynamically
        if [[ ! -d "$DOTFILES_DIR/.config/starship/themes" ]]; then
            # Look for dotfiles directory
            for possible_dir in ~/repos/dotfiles ~/.dotfiles; do
                if [[ -d "$possible_dir/.config/starship/themes" ]]; then
                    DOTFILES_DIR="$possible_dir"
                    break
                fi
            done
        fi
    fi
fi
THEMES_DIR="$DOTFILES_DIR/.config/starship/themes"
CONFIG_PATH="$HOME/.config/starship.toml"
CURRENT_THEME_FILE="$HOME/.config/starship-current-theme"

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Show usage
show_usage() {
    echo "Usage: $0 [command] [theme]"
    echo ""
    echo "Commands:"
    echo "  list, ls           List available themes"
    echo "  current            Show current theme"
    echo "  set <theme>        Switch to specified theme"
    echo "  preview <theme>    Preview theme configuration"
    echo "  add <name> <file>  Add new theme from file"
    echo "  backup             Backup current configuration"
    echo "  restore            Restore from backup"
    echo ""
    echo "Examples:"
    echo "  $0 list                    # List all available themes"
    echo "  $0 set minimal             # Switch to minimal theme"
    echo "  $0 current                 # Show current active theme"
    echo "  $0 preview enhanced        # Preview enhanced theme"
    echo "  $0 add neon ~/my-theme.toml  # Add theme from file"
    echo ""
}

# List available themes
list_themes() {
    log_info "Available Starship themes:"
    echo ""
    
    if [[ ! -d "$THEMES_DIR" ]]; then
        log_error "Themes directory not found: $THEMES_DIR"
        return 1
    fi
    
    local current_theme
    current_theme=$(get_current_theme)
    
    for theme_file in "$THEMES_DIR"/*.toml; do
        if [[ -f "$theme_file" ]]; then
            local theme_name
            theme_name=$(basename "$theme_file" .toml)
            
            # Read description from theme file
            local description
            description=$(grep "^#.*Theme" "$theme_file" | head -1 | sed 's/^# *//; s/ *Theme.*$//')
            
            if [[ "$theme_name" == "$current_theme" ]]; then
                echo -e "  ${GREEN}●${NC} ${GREEN}$theme_name${NC} - $description ${GREEN}(current)${NC}"
            else
                echo -e "  ○ $theme_name - $description"
            fi
        fi
    done
    echo ""
}

# Get current theme name
get_current_theme() {
    if [[ -f "$CURRENT_THEME_FILE" ]]; then
        cat "$CURRENT_THEME_FILE"
    else
        echo "unknown"
    fi
}

# Show current theme
show_current() {
    local current_theme
    current_theme=$(get_current_theme)
    
    if [[ "$current_theme" == "unknown" ]]; then
        log_warning "No theme currently set or theme file missing"
        if [[ -f "$CONFIG_PATH" ]]; then
            log_info "Starship config exists at: $CONFIG_PATH"
        else
            log_warning "No starship config found at: $CONFIG_PATH"
        fi
    else
        log_success "Current theme: $current_theme"
        
        # Show theme description if available
        local theme_file="$THEMES_DIR/$current_theme.toml"
        if [[ -f "$theme_file" ]]; then
            local description
            description=$(grep "^#.*Theme" "$theme_file" | head -1 | sed 's/^# *//')
            if [[ -n "$description" ]]; then
                echo "Description: $description"
            fi
        fi
    fi
}

# Preview theme
preview_theme() {
    local theme_name="$1"
    local theme_file="$THEMES_DIR/$theme_name.toml"
    
    if [[ ! -f "$theme_file" ]]; then
        log_error "Theme '$theme_name' not found"
        log_info "Available themes:"
        list_themes
        return 1
    fi
    
    log_info "Preview of theme: $theme_name"
    echo ""
    
    # Show theme description
    local description
    description=$(grep "^#.*Theme" "$theme_file" | head -1 | sed 's/^# *//')
    if [[ -n "$description" ]]; then
        echo "Description: $description"
        echo ""
    fi
    
    # Show what the prompt will look like
    echo "How this theme will look:"
    echo "========================="
    
    case "$theme_name" in
        "minimal")
            echo "Example prompt:"
            echo -e "\033[34m~/repos/dotfiles\033[0m \033[32mwork\033[0m >"
            echo ""
            echo "• Clean, single-line prompt"
            echo "• Just directory and git branch"
            echo "• No icons or extra symbols"
            echo "• Simple '>' character"
            ;;
        "simple")
            echo "Example prompt:"
            echo -e "\033[33msegersand\033[0m@\033[36m~/repos/dotfiles\033[0m on \033[35m⎇ work\033[0m \033[31m[+1 ~2]\033[0m"
            echo -e "❯"
            echo ""
            echo "• Shows username when relevant" 
            echo "• Git branch with ⎇ symbol"
            echo "• Git status indicators"
            echo "• Language versions when in projects"
            echo "• Command duration for slow commands"
            ;;
        "enhanced")
            echo "Example prompt:"
            echo -e "\033[33msegersand\033[0m on \033[31mmacbook\033[0m in \033[36m~/repos/dotfiles\033[0m on \033[35m🌱 work\033[0m \033[32m(a1b2c3d)\033[0m \033[32m[+3 -1]\033[0m \033[33mtook 2.3s\033[0m                                           \033[31m💥 1\033[0m \033[37m14:35:22\033[0m"
            echo -e "❯"
            echo ""
            echo "• Full-featured with all information"
            echo "• Username, hostname, detailed git info"
            echo "• Language versions, package info, docker context"
            echo "• Command duration, exit status, current time"
            echo "• Git commit hash and file change metrics"
            ;;
        *)
            echo "Generic preview - switch to this theme to see how it looks!"
            ;;
    esac
    
    echo ""
    echo "Configuration preview (first 15 lines):"
    echo "========================================"
    head -15 "$theme_file"
    echo ""
    echo "... (use 'cat $theme_file' to see full configuration)"
    echo ""
    echo "To use this theme: starship-theme set $theme_name"
    echo ""
}

# Set theme
set_theme() {
    local theme_name="$1"
    local theme_file="$THEMES_DIR/$theme_name.toml"
    
    if [[ ! -f "$theme_file" ]]; then
        log_error "Theme '$theme_name' not found"
        log_info "Available themes:"
        list_themes
        return 1
    fi
    
    # Ensure config directory exists
    mkdir -p "$(dirname "$CONFIG_PATH")"
    
    # Backup current config if it exists and no backup exists
    if [[ -f "$CONFIG_PATH" && ! -f "$CONFIG_PATH.backup" ]]; then
        log_info "Backing up current configuration..."
        cp "$CONFIG_PATH" "$CONFIG_PATH.backup"
    fi
    
    # Copy theme to starship config location
    log_info "Switching to theme: $theme_name"
    cp "$theme_file" "$CONFIG_PATH"
    
    # Save current theme name
    echo "$theme_name" > "$CURRENT_THEME_FILE"
    
    log_success "Theme switched to: $theme_name"
    log_info "Restart your shell or run 'source ~/.zshrc' to see changes"
}

# Backup current configuration
backup_config() {
    if [[ ! -f "$CONFIG_PATH" ]]; then
        log_error "No starship configuration found to backup"
        return 1
    fi
    
    local backup_path
    backup_path="$CONFIG_PATH.backup.$(date +%Y%m%d_%H%M%S)"
    cp "$CONFIG_PATH" "$backup_path"
    log_success "Configuration backed up to: $backup_path"
}

# Restore from backup
restore_config() {
    if [[ -f "$CONFIG_PATH.backup" ]]; then
        cp "$CONFIG_PATH.backup" "$CONFIG_PATH"
        log_success "Configuration restored from backup"
        # Clear current theme since we restored from backup
        rm -f "$CURRENT_THEME_FILE"
        log_info "Restart your shell to see changes"
    else
        log_error "No backup found at: $CONFIG_PATH.backup"
        return 1
    fi
}

# Add new theme from file
add_theme() {
    local theme_name="$1"
    local source_file="$2"
    
    if [[ -z "$theme_name" || -z "$source_file" ]]; then
        log_error "Usage: $0 add <theme_name> <source_file>"
        return 1
    fi
    
    if [[ ! -f "$source_file" ]]; then
        log_error "Source file not found: $source_file"
        return 1
    fi
    
    local theme_file="$THEMES_DIR/$theme_name.toml"
    
    if [[ -f "$theme_file" ]]; then
        log_warning "Theme '$theme_name' already exists"
        read -p "Overwrite? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Operation cancelled"
            return 0
        fi
    fi
    
    # Ensure themes directory exists
    mkdir -p "$THEMES_DIR"
    
    # Copy theme file
    cp "$source_file" "$theme_file"
    log_success "Theme '$theme_name' added successfully"
}

# Main command processing
case "${1:-list}" in
    list|ls)
        list_themes
        ;;
    current)
        show_current
        ;;
    set)
        if [[ -z "$2" ]]; then
            log_error "Theme name required"
            show_usage
            exit 1
        fi
        set_theme "$2"
        ;;
    preview)
        if [[ -z "$2" ]]; then
            log_error "Theme name required"
            show_usage
            exit 1
        fi
        preview_theme "$2"
        ;;
    backup)
        backup_config
        ;;
    restore)
        restore_config
        ;;
    add)
        add_theme "$2" "$3"
        ;;
    help|-h|--help)
        show_usage
        ;;
    *)
        log_error "Unknown command: $1"
        show_usage
        exit 1
        ;;
esac